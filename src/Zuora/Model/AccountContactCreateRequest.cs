/*
 * Quickstart API Reference
 *
 * Zuora Quickstart API is recommended for new customers and integrators, allowing new integrators to swiftly integrate with Zuora. It supports essential business use cases.   To use the Quickstart API, you must have the following features enabled on your tenant:   * [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization)  * [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement)  To find the latest changes made to the Zuora Quickstart API, check the [Quickstart API Changelog](https://www.zuora.com/developer/quickstart-api/changelog/2022q4-changelog/).  We recommend that you subscribe to [Developers Community](https://community.zuora.com/communities/community-home?communitykey=e2a932b4-50c4-4019-a3e8-362e38714df3) to get notifications when a new version is released.  
 *
 * The version of the OpenAPI document: 2023-09-25
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Zuora.Client.OpenAPIDateConverter;

namespace Zuora.Model
{
    /// <summary>
    /// AccountContactCreateRequest
    /// </summary>
    [DataContract]
    public partial class AccountContactCreateRequest :  IEquatable<AccountContactCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// The type of the additional phone number.
        /// </summary>
        /// <value>The type of the additional phone number.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OtherPhoneType
        {
            /// <summary>
            /// Enum Work for value: work
            /// </summary>
            [EnumMember(Value = "work")]
            Work = 1,

            /// <summary>
            /// Enum Mobile for value: mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            Mobile = 2,

            /// <summary>
            /// Enum Home for value: home
            /// </summary>
            [EnumMember(Value = "home")]
            Home = 3,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 4

        }

        /// <summary>
        /// The type of the additional phone number.
        /// </summary>
        /// <value>The type of the additional phone number.</value>
        [DataMember(Name="other_phone_type", EmitDefaultValue=false)]
        public OtherPhoneType? other_phone_type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountContactCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountContactCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountContactCreateRequest" /> class.
        /// </summary>
        /// <param name="customFields">Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format..</param>
        /// <param name="address">address.</param>
        /// <param name="firstName">Customer first name. (required).</param>
        /// <param name="homePhone">Customer home phone (including extension)..</param>
        /// <param name="lastName">Customer last name. (required).</param>
        /// <param name="mobilePhone">Customer phone (including extension)..</param>
        /// <param name="nickname">Nickname for this contact..</param>
        /// <param name="otherPhone">Other customer phone (including extension)..</param>
        /// <param name="email">Customer email address..</param>
        /// <param name="taxRegion">A region defined in your Zuora Tax rules..</param>
        /// <param name="workEmail">Customer work email..</param>
        /// <param name="workPhone">Customer work phone..</param>
        /// <param name="otherPhoneType">The type of the additional phone number..</param>
        /// <param name="fax">The contact&#39;s fax number..</param>
        public AccountContactCreateRequest(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), Address address = default(Address), string firstName = default(string), string homePhone = default(string), string lastName = default(string), string mobilePhone = default(string), string nickname = default(string), string otherPhone = default(string), string email = default(string), string taxRegion = default(string), string workEmail = default(string), string workPhone = default(string), OtherPhoneType? otherPhoneType = default(OtherPhoneType?), string fax = default(string))
        {
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for AccountContactCreateRequest and cannot be null");
            }
            else
            {
                this.first_name = firstName;
            }

            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for AccountContactCreateRequest and cannot be null");
            }
            else
            {
                this.last_name = lastName;
            }

            this.custom_fields = customFields;
            this.address = address;
            this.home_phone = homePhone;
            this.mobile_phone = mobilePhone;
            this.nickname = nickname;
            this.other_phone = otherPhone;
            this.email = email;
            this.tax_region = taxRegion;
            this.work_email = workEmail;
            this.work_phone = workPhone;
            this.other_phone_type = otherPhoneType;
            this.fax = fax;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string id { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who last updated the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who last updated the object</value>
        [DataMember(Name="updated_by_id", EmitDefaultValue=false)]
        public string updated_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was last updated in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was last updated in ISO 8601 UTC format.</value>
        [DataMember(Name="updated_time", EmitDefaultValue=false)]
        public DateTime updated_time { get; private set; }

        /// <summary>
        /// Unique identifier of the Zuora user who created the object
        /// </summary>
        /// <value>Unique identifier of the Zuora user who created the object</value>
        [DataMember(Name="created_by_id", EmitDefaultValue=false)]
        public string created_by_id { get; private set; }

        /// <summary>
        /// The date and time when the object was created in ISO 8601 UTC format.
        /// </summary>
        /// <value>The date and time when the object was created in ISO 8601 UTC format.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public DateTime created_time { get; private set; }

        /// <summary>
        /// Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.
        /// </summary>
        /// <value>Set of user-defined fields associated with this object. Useful for storing additional information about the object in a structured format.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_fields { get; set; }

        /// <summary>
        /// The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).
        /// </summary>
        /// <value>The custom fields associated with an object. For more information about custom fields, see [Manage custom fields](https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields).</value>
        [DataMember(Name="custom_objects", EmitDefaultValue=false)]
        public Dictionary<string, Object> custom_objects { get; private set; }

        /// <summary>
        /// Gets or Sets address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address address { get; set; }

        /// <summary>
        /// Customer first name.
        /// </summary>
        /// <value>Customer first name.</value>
        [DataMember(Name="first_name", EmitDefaultValue=true)]
        public string first_name { get; set; }

        /// <summary>
        /// Customer home phone (including extension).
        /// </summary>
        /// <value>Customer home phone (including extension).</value>
        [DataMember(Name="home_phone", EmitDefaultValue=false)]
        public string home_phone { get; set; }

        /// <summary>
        /// Customer last name.
        /// </summary>
        /// <value>Customer last name.</value>
        [DataMember(Name="last_name", EmitDefaultValue=true)]
        public string last_name { get; set; }

        /// <summary>
        /// Customer phone (including extension).
        /// </summary>
        /// <value>Customer phone (including extension).</value>
        [DataMember(Name="mobile_phone", EmitDefaultValue=false)]
        public string mobile_phone { get; set; }

        /// <summary>
        /// Nickname for this contact.
        /// </summary>
        /// <value>Nickname for this contact.</value>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string nickname { get; set; }

        /// <summary>
        /// Other customer phone (including extension).
        /// </summary>
        /// <value>Other customer phone (including extension).</value>
        [DataMember(Name="other_phone", EmitDefaultValue=false)]
        public string other_phone { get; set; }

        /// <summary>
        /// Customer email address.
        /// </summary>
        /// <value>Customer email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string email { get; set; }

        /// <summary>
        /// A region defined in your Zuora Tax rules.
        /// </summary>
        /// <value>A region defined in your Zuora Tax rules.</value>
        [DataMember(Name="tax_region", EmitDefaultValue=false)]
        public string tax_region { get; set; }

        /// <summary>
        /// Customer work email.
        /// </summary>
        /// <value>Customer work email.</value>
        [DataMember(Name="work_email", EmitDefaultValue=false)]
        public string work_email { get; set; }

        /// <summary>
        /// Customer work phone.
        /// </summary>
        /// <value>Customer work phone.</value>
        [DataMember(Name="work_phone", EmitDefaultValue=false)]
        public string work_phone { get; set; }


        /// <summary>
        /// The contact&#39;s fax number.
        /// </summary>
        /// <value>The contact&#39;s fax number.</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string fax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountContactCreateRequest {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  updated_by_id: ").Append(updated_by_id).Append("\n");
            sb.Append("  updated_time: ").Append(updated_time).Append("\n");
            sb.Append("  created_by_id: ").Append(created_by_id).Append("\n");
            sb.Append("  created_time: ").Append(created_time).Append("\n");
            sb.Append("  custom_fields: ").Append(custom_fields).Append("\n");
            sb.Append("  custom_objects: ").Append(custom_objects).Append("\n");
            sb.Append("  address: ").Append(address).Append("\n");
            sb.Append("  first_name: ").Append(first_name).Append("\n");
            sb.Append("  home_phone: ").Append(home_phone).Append("\n");
            sb.Append("  last_name: ").Append(last_name).Append("\n");
            sb.Append("  mobile_phone: ").Append(mobile_phone).Append("\n");
            sb.Append("  nickname: ").Append(nickname).Append("\n");
            sb.Append("  other_phone: ").Append(other_phone).Append("\n");
            sb.Append("  email: ").Append(email).Append("\n");
            sb.Append("  tax_region: ").Append(tax_region).Append("\n");
            sb.Append("  work_email: ").Append(work_email).Append("\n");
            sb.Append("  work_phone: ").Append(work_phone).Append("\n");
            sb.Append("  other_phone_type: ").Append(other_phone_type).Append("\n");
            sb.Append("  fax: ").Append(fax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountContactCreateRequest);
        }

        /// <summary>
        /// Returns true if AccountContactCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountContactCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountContactCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.updated_by_id == input.updated_by_id ||
                    (this.updated_by_id != null &&
                    this.updated_by_id.Equals(input.updated_by_id))
                ) && 
                (
                    this.updated_time == input.updated_time ||
                    (this.updated_time != null &&
                    this.updated_time.Equals(input.updated_time))
                ) && 
                (
                    this.created_by_id == input.created_by_id ||
                    (this.created_by_id != null &&
                    this.created_by_id.Equals(input.created_by_id))
                ) && 
                (
                    this.created_time == input.created_time ||
                    (this.created_time != null &&
                    this.created_time.Equals(input.created_time))
                ) && 
                (
                    this.custom_fields == input.custom_fields ||
                    this.custom_fields != null &&
                    input.custom_fields != null &&
                    this.custom_fields.SequenceEqual(input.custom_fields)
                ) && 
                (
                    this.custom_objects == input.custom_objects ||
                    this.custom_objects != null &&
                    input.custom_objects != null &&
                    this.custom_objects.SequenceEqual(input.custom_objects)
                ) && 
                (
                    this.address == input.address ||
                    (this.address != null &&
                    this.address.Equals(input.address))
                ) && 
                (
                    this.first_name == input.first_name ||
                    (this.first_name != null &&
                    this.first_name.Equals(input.first_name))
                ) && 
                (
                    this.home_phone == input.home_phone ||
                    (this.home_phone != null &&
                    this.home_phone.Equals(input.home_phone))
                ) && 
                (
                    this.last_name == input.last_name ||
                    (this.last_name != null &&
                    this.last_name.Equals(input.last_name))
                ) && 
                (
                    this.mobile_phone == input.mobile_phone ||
                    (this.mobile_phone != null &&
                    this.mobile_phone.Equals(input.mobile_phone))
                ) && 
                (
                    this.nickname == input.nickname ||
                    (this.nickname != null &&
                    this.nickname.Equals(input.nickname))
                ) && 
                (
                    this.other_phone == input.other_phone ||
                    (this.other_phone != null &&
                    this.other_phone.Equals(input.other_phone))
                ) && 
                (
                    this.email == input.email ||
                    (this.email != null &&
                    this.email.Equals(input.email))
                ) && 
                (
                    this.tax_region == input.tax_region ||
                    (this.tax_region != null &&
                    this.tax_region.Equals(input.tax_region))
                ) && 
                (
                    this.work_email == input.work_email ||
                    (this.work_email != null &&
                    this.work_email.Equals(input.work_email))
                ) && 
                (
                    this.work_phone == input.work_phone ||
                    (this.work_phone != null &&
                    this.work_phone.Equals(input.work_phone))
                ) && 
                (
                    this.other_phone_type == input.other_phone_type ||
                    (this.other_phone_type != null &&
                    this.other_phone_type.Equals(input.other_phone_type))
                ) && 
                (
                    this.fax == input.fax ||
                    (this.fax != null &&
                    this.fax.Equals(input.fax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.updated_by_id != null)
                    hashCode = hashCode * 59 + this.updated_by_id.GetHashCode();
                if (this.updated_time != null)
                    hashCode = hashCode * 59 + this.updated_time.GetHashCode();
                if (this.created_by_id != null)
                    hashCode = hashCode * 59 + this.created_by_id.GetHashCode();
                if (this.created_time != null)
                    hashCode = hashCode * 59 + this.created_time.GetHashCode();
                if (this.custom_fields != null)
                    hashCode = hashCode * 59 + this.custom_fields.GetHashCode();
                if (this.custom_objects != null)
                    hashCode = hashCode * 59 + this.custom_objects.GetHashCode();
                if (this.address != null)
                    hashCode = hashCode * 59 + this.address.GetHashCode();
                if (this.first_name != null)
                    hashCode = hashCode * 59 + this.first_name.GetHashCode();
                if (this.home_phone != null)
                    hashCode = hashCode * 59 + this.home_phone.GetHashCode();
                if (this.last_name != null)
                    hashCode = hashCode * 59 + this.last_name.GetHashCode();
                if (this.mobile_phone != null)
                    hashCode = hashCode * 59 + this.mobile_phone.GetHashCode();
                if (this.nickname != null)
                    hashCode = hashCode * 59 + this.nickname.GetHashCode();
                if (this.other_phone != null)
                    hashCode = hashCode * 59 + this.other_phone.GetHashCode();
                if (this.email != null)
                    hashCode = hashCode * 59 + this.email.GetHashCode();
                if (this.tax_region != null)
                    hashCode = hashCode * 59 + this.tax_region.GetHashCode();
                if (this.work_email != null)
                    hashCode = hashCode * 59 + this.work_email.GetHashCode();
                if (this.work_phone != null)
                    hashCode = hashCode * 59 + this.work_phone.GetHashCode();
                if (this.other_phone_type != null)
                    hashCode = hashCode * 59 + this.other_phone_type.GetHashCode();
                if (this.fax != null)
                    hashCode = hashCode * 59 + this.fax.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
